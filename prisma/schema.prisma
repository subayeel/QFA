datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?         // For email/password authentication
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  userTodos     UserTodo[]
  donations     Donation[]
  hifzProgress  HifzProgress[]
  
  // Course progress tracking - arrays of completed lesson and task IDs
  completedLessons String[] @default([]) // Array of lesson IDs (e.g., ["SalahLesson1", "ImaanLesson2"])
  completedTasks   String[] @default([]) // Array of task IDs (e.g., ["1", "2"])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Base todo definitions (reusable)
model Todo {
  id          String   @id @default(cuid())
  title       String
  description String?
  time        String?
  category    String?  // "prayer" | "quran" | "dhikr" | "charity" | "learning" | "personal"
  priority    String   @default("medium") // "high" | "medium" | "low"
  timePriority Int?
  type        String   @default("custom") // "custom" or "suggested"
  scope       Scope    @default(USER) // "USER" or "ADMIN"
  
  // When this todo should be suggested (e.g., "daily", "weekly", "monthly")
  frequency   String?  // "daily", "weekly", "monthly", "custom"
  
  // For custom frequency, store the logic (e.g., "prayer_times", "hijri_date")
  customLogic String?
  
  // Relationships
  userTodos   UserTodo[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([category])
  @@index([scope])
  @@index([frequency])
}

// User-specific todo instances with tracking
model UserTodo {
  id          String   @id @default(cuid())
  date        DateTime
  completed   Boolean  @default(false)
  missed      Boolean  @default(false)
  archived    Boolean  @default(false)
  
  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  todoId      String
  todo        Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, todoId, date]) // Prevent duplicate todos on same date
  @@index([userId, date])
  @@index([userId, completed])
  @@index([userId, archived])
  @@index([todoId])
}

enum Scope {
  USER
  ADMIN
}

// Charity and Donation Models
enum DonationType {
  ZAKAH
  QURAN
  ONE_PLATE
  OLD_CLOTHES
  OLD_BOOKS
  CUSTOM
}

enum DonationStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum HelpRequestStatus {
  PENDING
  APPROVED
  FULFILLED
  REJECTED
}

enum HelpRequestType {
  BOOKS
  CLOTHES
  FOOD
  EDUCATION
  MEDICAL
  SHELTER
  OTHER
}

// Donation records
model Donation {
  id          String         @id @default(cuid())
  type        DonationType
  amount      Float?         // For monetary donations
  description String?        // Custom description for the donation
  status      DonationStatus @default(PENDING)
  
  // Optional: Link to user if they want to track their donations
  userId      String?
  user        User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Anonymous donations can be made without user ID
  anonymous   Boolean        @default(false)
  donorName   String?        // Optional name for anonymous donations
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([type])
  @@index([status])
  @@index([userId])
  @@index([createdAt])
}

// Help requests from people in need
model HelpRequest {
  id          String             @id @default(cuid())
  type        HelpRequestType
  title       String
  description String
  urgency     String             @default("medium") // "low", "medium", "high", "critical"
  status      HelpRequestStatus  @default(PENDING)
  
  // Contact information (optional for anonymous requests)
  contactName String?
  contactEmail String?
  contactPhone String?
  location    String?
  
  // Request details
  quantity    String?            // e.g., "2 books", "5 sets of clothes"
  preferredDelivery String?      // "pickup", "delivery", "meetup"
  additionalNotes String?
  
  // Admin notes
  adminNotes  String?
  fulfilledBy String?            // Admin who fulfilled the request
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([type])
  @@index([status])
  @@index([urgency])
  @@index([createdAt])
}

// Hifz Progress Tracking Model
model HifzProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Surah and verse tracking
  surahNumber Int      // 1-114 (Quran surah number)
  surahName   String   // Name of the surah
  totalVerses Int      // Total verses in this surah
  memorizedVerses Int  // Number of verses memorized in this surah
  
  // Progress tracking
  isCompleted Boolean  @default(false) // Whether the entire surah is completed
  lastUpdated DateTime @default(now())
  
  // Optional notes
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, surahNumber]) // One record per surah per user
  @@index([userId])
  @@index([surahNumber])
  @@index([isCompleted])
  @@index([lastUpdated])
}

